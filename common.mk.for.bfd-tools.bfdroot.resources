#
# Variables PROJECT, PLATFORM and C_BIN_NAMES should be defined when
# this file is invoked.
#

OBJ_SUFFIX := o
LIB_SUFFIX := a
SLIB_SUFFIX := .so
C_INC_SUFFIX := h
C_SRC_SUFFIX := c
C_BIN_SUFFIX := exe
CXX_INC_SUFFIX := h
CXX_SRC_SUFFIX := C
CXX_BIN_SUFFIX := root.exe
IGNORE_DIRS := CVS MacOSX-pcc Linux-i386 epxa10
PUB_ROOT := public
PVT_ROOT := private
DUMMY_TOOLS := java root jvm

# Set up tools for cross-compilation if necessary
ifeq ("epxa10","$(strip $(PLATFORM))")
  HOST_CC := cc
  CPP := arm-elf-cpp
  CC := arm-elf-gcc
  AR := arm-elf-ar
  AS := arm-elf-as
  LD := arm-elf-ld
else
  CPP := cpp
  GXX := g++ -Wall
  CC := cc
  AR := ar
  AS := as
  LD := ld
endif

-include localDefns.mk

C_FLAGS += -g
CXX_FLAGS += -fPIC -D_REENTRANT

# patch for old files...
PUB_DIR_NAME := $(PUB_ROOT)
PVT_DIR_NAME := $(PVT_ROOT)

# Set up local commands
CP := cp
LN := ln -s
RM := rm -f
XSLT := java org.apache.xalan.xslt.Process
MAKEDEPEND := /usr/X11R6/bin/makedepend

# set up default values if none supplied
ifeq (,$(strip $(ICESOFT_HOST)))
  ICESOFT_HOST := $(PLATFORM)
endif

ifneq (,$(strip $(PLATFORM)))
  C_FLAGS += -DICESOFT_PLATFORM=$(PLATFORM)
endif

ifneq (,$(strip $(ICESOFT_BUILD)))
  C_FLAGS += -DICESOFT_BUILD=$(ICESOFT_BUILD)
else
  C_FLAGS += -DICESOFT_BUILD=0
endif

ifneq (,$(strip $(PROJECT_TAG)))
  C_FLAGS += -DPROJECT_TAG=$(PROJECT_TAG)
else
  C_FLAGS += -DPROJECT_TAG=Unknown
endif

# Set up standard directories
TOOLS_ROOT := ../tools
PLATFORM_PUB_ROOT := $(PUB_ROOT)/$(PLATFORM)
PLATFORM_PVT_ROOT := $(PVT_ROOT)/$(PLATFORM)
SCRIPTS_DIR := scripts
BUILD_BASE := ../$(PLATFORM)/build
BUILD_DIR := $(BUILD_BASE)/$(PROJECT)
LIB_DIR := ../$(PLATFORM)/lib
BIN_DIR := ../$(PLATFORM)/bin
RSRC_DIR := ../$(PLATFORM)/rsrc/$(PROJECT)
COMMON_RSRC_DIR := ../rsrc/$(PROJECT)
LIBRARY := $(LIB_DIR)/lib$(PROJECT).$(LIB_SUFFIX)
DEPENDENCY_FILE := $(BUILD_DIR)/depenencies.d

# Set up extra directories for cross-compilation
ifeq ("epxa10","$(strip $(PLATFORM))")
  HOST_BUILD_DIR := ../$(PLATFORM)/host
  HOST_BIN_DIR := ../$(PLATFORM)/host

  ARM_HOME := /home/icecube/arm-elf
  ARM_INC_DIR := $(TOOLS_ROOT)/$(ICESOFT_HOST)/arm-elf/public/arm-elf
  INC_PATHS += $(ARM_INC_DIR)
  ARM_LIB_DIR := $(TOOLS_ROOT)/$(ICESOFT_HOST)/lib/arm-elf
  ARM_GCC_VERS := $(sort $(notdir $(wildcard $(ARM_LIB_DIR)/lib/gcc-lib/arm-elf/*)))
  LOAD_LIBDIRS += -L $(ARM_LIB_DIR)/lib
  SYS_LIBS += $(ARM_LIB_DIR)/arm-elf/lib/libc.a $(ARM_LIB_DIR)/lib/gcc-lib/arm-elf/$(ARM_GCC_VERS)/libgcc.a
  A_FLAGS := -mcpu=arm920t
endif

# Find list of packages in this project
PACKAGES := $(filter-out $(IGNORE_DIRS), $(sort $(notdir $(foreach PROJECT_DIR, $(PLATFORM_PUB_ROOT) $(PUB_ROOT) $(PLATFORM_PVT_ROOT) $(PVT_ROOT), $(wildcard $(PROJECT_DIR)/*)))))

# Build up a list of directories which may contain valid public files.
PUB_DIRS := $(foreach ROOT, $(PLATFORM_PUB_ROOT) $(PUB_ROOT), $(patsubst %,$(ROOT)/%, $(PACKAGES)))
BUILD_PUB_DIRS := $(patsubst %,$(BUILD_DIR)/$(PUB_ROOT)/%, $(PACKAGES))

# Build up a list of directories which may contain valid private files.
PVT_DIRS := $(foreach ROOT, $(PLATFORM_PVT_ROOT) $(PVT_ROOT), $(patsubst %,$(ROOT)/%, $(PACKAGES)))
BUILD_PVT_DIRS := $(patsubst %,$(BUILD_DIR)/$(PVT_ROOT)/%, $(PACKAGES))

# General patterns used for find files:
# _SEARCH_<type> is a wildcarded list of all directories to search
# _FOUND_<type> is the results of the wildcard search
# _EXCLUDE_<type> is an explicit list of file no to include
# _<type> is the final list of types
# NAMES_OF_<type> is a list if base files names for the type

# Find all the 'h' files in the project, and set up the necessary
# variables to build then into the library and executables
C_SEARCH_INCS := $(patsubst %,%/*.$(C_INC_SUFFIX), $(PUB_DIRS) $(PVT_DIRS))
C_INCS := $(wildcard $(C_SEARCH_INCS))

# Find all the 'c' source files in the project, and set up the necessary
# variables to build then into the library and executables
C_SEARCH_SRCS := $(patsubst %,%/*.$(C_SRC_SUFFIX), $(BUILD_PVT_DIRS) $(PVT_DIRS))
C_FOUND_SRCS := $(wildcard $(C_SEARCH_SRCS))
C_EXCLUDE_SRCS := $(foreach SRC_FILE, $(C_EXCLUDE_NAMES),$(patsubst %,%/$(SRC_FILE).$(C_SRC_SUFFIX), $(BUILD_PVT_DIRS) $(PVT_DIRS)))
C_SRCS := $(filter-out $(C_EXCLUDE_SRCS), $(C_FOUND_SRCS))

# The following removes duplicate file names so only one gets built
C_NAMES_OF_SRCS := $(sort $(notdir $(C_SRCS)))
C_OBJS := $(patsubst %.$(C_SRC_SUFFIX),$(BUILD_DIR)/%.$(OBJ_SUFFIX), $(C_NAMES_OF_SRCS))
C_EXES := $(patsubst %,$(BUILD_DIR)/%.$(C_BIN_SUFFIX), $(C_BIN_NAMES))
C_BINS := $(patsubst %,$(BIN_DIR)/%, $(C_BIN_NAMES))

# The following removes binary files from the list of file to use in
# in building a library
C_LIB_SRCS := $(filter-out $(patsubst %,%.$(C_SRC_SUFFIX), $(C_BIN_NAMES)), $(C_NAMES_OF_SRCS))
C_LIB_OBJS := $(C_LIB_SRCS:%.$(C_SRC_SUFFIX)=$(LIBRARY)(%.$(OBJ_SUFFIX)))


INCS := $(C_INCS)

SRCS += $(C_SRCS)
OBJS += $(C_OBJS)
LIB_OBJS += $(C_LIB_OBJS)
BIN_EXES += $(C_EXES)
TO_BE_CLEANED += $(C_BINS)

# Find all the 'h' files in the project, and set up the necessary
# variables to build then into the library and executables
CXX_SEARCH_INCS := $(patsubst %,%/*.$(CXX_INC_SUFFIX), $(PUB_DIRS) $(PVT_DIRS))
CXX_ALLINCS := $(wildcard $(CXX_SEARCH_INCS))
CXX_NONCLASS_INCS := $(foreach DIR, $(PUB_DIRS) $(PVT_DIRS), \
			$(foreach FILE, $(ROOT_NON_CLASSES), $(DIR)/$(FILE).$(CXX_INC_SUFFIX)))
CXX_INCS := $(filter-out $(CXX_NONCLASS_INCS), $(CXX_ALLINCS))

# Find all the 'root' source files in the project, and set up the necessary
# variables to build then into the library and executables
CXX_SEARCH_SRCS := $(patsubst %,%/*.$(CXX_SRC_SUFFIX), $(BUILD_PVT_DIRS) $(PVT_DIRS))
CXX_FOUND_SRCS := $(wildcard $(CXX_SEARCH_SRCS))
CXX_EXCLUDE_SRCS := $(foreach SRC_FILE, $(CXX_EXCLUDE_NAMES),$(patsubst %,%/$(SRC_FILE).$(CXX_SRC_SUFFIX), $(BUILD_PVT_DIRS) $(PVT_DIRS)))
CXX_SRCS := $(filter-out $(CXX_EXCLUDE_SRCS), $(CXX_FOUND_SRCS))

# The following removes duplicate file names so only one gets built
CXX_NAMES_OF_SRCS := $(sort $(notdir $(CXX_SRCS)))
CXX_OBJS := $(patsubst %.$(CXX_SRC_SUFFIX),$(BUILD_DIR)/%.$(OBJ_SUFFIX), $(CXX_NAMES_OF_SRCS))
CXX_EXES := $(patsubst %,$(BUILD_DIR)/%.$(CXX_BIN_SUFFIX), $(CXX_BIN_NAMES))
CXX_BINS := $(patsubst %,$(BIN_DIR)/%, $(CXX_BIN_NAMES))

# The following removes binary files from the list of file to use in
# in building a library
CXX_SLIB_SRCS := $(filter-out $(patsubst %,%.$(CXX_SRC_SUFFIX), $(CXX_BIN_NAMES)), $(CXX_NAMES_OF_SRCS))
CXX_SLIB_OBJS := $(patsubst %.$(CXX_SRC_SUFFIX),$(BUILD_DIR)/%.$(OBJ_SUFFIX), $(CXX_SLIB_SRCS))

# Prepare shared libraries for C++ code
CXX_SLIB := $(LIB_DIR)/lib$(PROJECT).so
ifneq (,$(strip $(CXX_SLIB_OBJS)))

  # If not building JNI libraries, assume they are ROOT plug-ins
  ifneq (,$(strip $(filter java,$(USES_TOOLS))))
    ifneq ("MacOSX-ppc","$(PLATFORM)")
      JAVA_SLIB := $(CXX_SLIB)
      JAVA_SLIB_FLAGS := -shared
    else
      JAVA_SLIB := $(LIB_DIR)/lib$(PROJECT).jnilib
      JAVA_SLIB_FLAGS := -bundle
    endif
  else
    ROOT_SLIB := $(CXX_SLIB)

    # Set up the symbols for the CINT dictionary file
    LOCAL_LINKDEF := $(wildcard LinkDef.h)
    CXX_OBJS += $(PROJECT)Dict.$(CXX_SRC_SUFFIX)
    CXX_SLIB_OBJS += $(BUILD_DIR)/$(PROJECT)Dict.$(OBJ_SUFFIX)
    BUILT_FILES := $(BUILD_DIR)/$(PUB_DIR_NAME)/$(PROJECT)/$(PROJECT)Dict.$(CXX_SRC_SUFFIX)
  endif

  # Prepare to build the plug-in's shared library
  ifneq ("MacOSX-ppc","$(PLATFORM)")
    CXX_SLIB_FLAGS := -shared
  else
    DL_LIB_FIX := -dylib_file /sw/lib/libdl.0.dylib:../tools/MacOSX-ppc/lib/libdl.0.dylib
    ifeq (10.3,$(MACOSX_DEPLOYMENT_TARGET))
      CXX_SLIB_FLAGS := -bundle -undefined dynamic_lookup
    else
      CXX_SLIB_FLAGS := -bundle -flat_namespace -undefined suppress
    endif
    CXX_DYLIB := $(patsubst %.so,%.dylib,$(CXX_SLIB))
  endif

endif

# Set up symbols for creation binaries.
ifneq (,$(strip $(CXX_BIN_NAMES)))
  ifneq (,$(strip $(filter root,$(USES_TOOLS))))
    LOAD_LIBDIRS += -L$(TOOLS_ROOT)/$(ICESOFT_HOST)/lib/root/lib
  endif
  ifneq (,$(strip $(filter jvm,$(USES_TOOLS))))
    ifeq ("MacOSX-ppc","$(PLATFORM)")
      LOAD_LIBS += /System/Library/Frameworks/JavaVM.framework/Versions/A/JavaVM
    else
      LOAD_LIBS += -ljava
    endif
  endif
  ifeq ("MacOSX-ppc","$(PLATFORM)")
    CXX_LD_FLAGS += -Xlinker -bind_at_load 
  endif
endif

# Build list of explicit template instanitation files.
EXPICIT_INSTANTIATION_SRCS := $(filter private/explicit-templates/%, $(CXX_SRCS))

SRCS += $(CXX_SRCS)
OBJS += $(CXX_OBJS)
BIN_EXES += $(CXX_EXES)
TO_BE_CLEANED += $(CXX_BINS)

# Build list of directories to find include files from other projects
DEPENDS_UPON_INC_DIRS := $(patsubst %,$(BUILD_BASE)/%/$(PUB_ROOT), $(USES_PROJECTS)) $(patsubst %,../%/$(PLATFORM_PUB_ROOT), $(USES_PROJECTS)) $(patsubst %,../%/$(PUB_ROOT), $(USES_PROJECTS)) $(patsubst %,$(TOOLS_ROOT)/$(PLATFORM)/%/$(PUB_ROOT), $(USES_TOOLS))

# Set up symbols depending whether a library is generated or not
ifneq (,$(strip $(LIB_OBJS) $(CXX_SLIB_OBJS)))
  DEPENDS_UPON_LIBS := $(PROJECT) $(USES_PROJECTS)
  ifneq (,$(strip $(LIB_OBJS)))
    LIBRARY_EXISTS := $(LIBRARY)
  endif
  ifneq (,$(strip $(CXX_SLIB_OBJS)))
    SLIB_EXISTS := $(CXX_SLIB)
  endif
else
  DEPENDS_UPON_LIBS := $(USES_PROJECTS)
  LIBRARY_EXISTS := 
endif

# Build include paths
INC_FLAGS := $(patsubst %,-I%, $(BUILD_DIR)/$(PUB_ROOT) $(BUILD_DIR)/$(PVT_ROOT) $(PLATFORM_PUB_ROOT) $(PUB_ROOT) $(PLATFORM_PVT_ROOT) $(PVT_ROOT) $(DEPENDS_UPON_INC_DIRS) $(INC_PATHS))
ROOTCINT_INC_FLAGS := $(patsubst %,-I../%, $(BUILD_DIR)/$(PUB_ROOT) $(BUILD_DIR)/$(PVT_ROOT) $(PLATFORM_PUB_ROOT) $(PUB_ROOT) $(PLATFORM_PVT_ROOT) $(PVT_ROOT) $(DEPENDS_UPON_INC_DIRS))

# Build compiler flags
C_FLAGS += $(INC_FLAGS)
CXX_FLAGS += $(C_FLAGS)

# Build load paths
LOAD_LIBDIRS += $(patsubst %,-L%, $(LIB_DIR) $(TOOLS_ROOT)/$(PLATFORM)/lib $(XTRA_TOOLS_LIBDIRS))
ifneq (,$(strip $(filter root, $(USES_TOOLS))))
  ROOT_DEPENDS := Core Cint Hist Graf Graf3d Gpad Tree Rint Postscript Matrix Physics Gui pthread m dl EG Html
endif
LOAD_LIBS += $(patsubst %,-l%, $(DEPENDS_UPON_LIBS) $(filter-out $(DUMMY_TOOLS), $(USES_TOOLS)) $(XTRA_LOAD_LIBS) $(ROOT_DEPENDS))

# Set gmake to search all the directories which may contain valid object
# or executable files.
vpath %.$(CXX_INC_SUFFIX) $(BUILD_PUB_DIRS) $(PUB_DIRS) $(BUILD_PVT_DIRS) $(PVT_DIRS)
vpath %.$(C_SRC_SUFFIX) $(BUILD_PVT_DIRS) $(PVT_DIRS)
vpath %.$(CXX_SRC_SUFFIX) $(BUILD_PVT_DIRS) $(PVT_DIRS) $(BUILD_DIR)/$(PUB_DIR_NAME)/$(PROJECT)
vpath %.$(OBJ_SUFFIX) $(BUILD_DIR) $(HOME)
vpath %.$(C_BIN_SUFFIX) $(BUILD_DIR)

TO_BE_CLEANED += $(BUILD_DIR) $(LIBRARY) $(ROOT_SLIB) $(JAVA_SLIB) $(RSRC_DIR)

-include localMods.mk

CREATE_LIB := $(AR) rs $(LIBRARY) null 2> /dev/null

# Make dependency command a variable so it can be overridden
BUILD_DEPENDS := 	@test -d $(BUILD_DIR) || mkdir -p $(BUILD_DIR) ; \
	echo "--> finding dependences... " ; \
	touch $(DEPENDENCY_FILE).tmp ; \
	test -z "$(SRCS)" || $(MAKEDEPEND) -f $(DEPENDENCY_FILE).tmp -p$$\(BUILD_DIR\)/ $(MAKEDEPENDFLAGS) $(C_FLAGS) -I $(TOOLS_ROOT)/resources/makedepend/include $(SRCS) ; \
	cat $(DEPENDENCY_FILE).tmp | sed -e 's/)[-a-zA-Z_.0-9\/]*\//)\//g' > $(DEPENDENCY_FILE) ; \
	rm $(DEPENDENCY_FILE).tmp* ; \
	echo "--> have found dependencies and updated Makefile" ; \
	test -z "$(LIB_OBJS)$(CXX_SLIB_OBJS)" || test -d $(LIB_DIR) || mkdir -p $(LIB_DIR) ; \
	test -z "$(LIB_OBJS)" || test -f $(LIBRARY)  || $(CREATE_LIB); echo "nop" 1> /dev/null  ; \
	test -z "$(BIN_EXES)" || test -d $(BIN_DIR) || mkdir -p $(BIN_DIR) ;

.PHONY: compile lib exes dump clean

.SUFFIXES: .$(C_BIN_SUFFIX)

default: exes

compile: $(OBJS)

lib :  compile $(LIB_OBJS) $(ROOT_SLIB) $(JAVA_SLIB) $(CXX_DYLIB) $(LIB_PRODUCTS) 

bin : lib $(BIN_EXES)

doxygen :
	@echo "The doxygen target has not yet been implemented."

clean :
	$(RM) -r $(TO_BE_CLEANED) $(BUILT_FILES)

dump:
	@echo "PROJECT is $(PROJECT)"
	@echo "USES_PROJECTS is $(USES_PROJECTS)"
	@echo "PACKAGES is $(PACKAGES)"
	@echo "LIBRARY is $(LIBRARY)"
	@echo "IGNORE_DIRS is $(IGNORE_DIRS)"
	@echo "BUILT_FILES is $(BUILT_FILES)"
	@echo "PUB_DIRS is $(PUB_DIRS)"
	@echo "PVT_DIRS is $(PVT_DIRS)"
	@echo "BUILD_PUB_DIRS is $(BUILD_PUB_DIRS)"
	@echo "BUILD_PVT_DIRS is $(BUILD_PVT_DIRS)"
	@echo "INCS is $(INCS)"
	@echo "SRCS is $(SRCS)"
	@echo "OBJS is $(OBJS)"
	@echo "LIB_OBJS is $(LIB_OBJS)"
	@echo "JAVA_SLIB_OBJS is $(JAVA_SLIB_OBJS)"
	@echo "CXX_SLIB_OBJS is $(CXX_SLIB_OBJS)"
	@echo "CXX_SLIB is $(CXX_SLIB)"
	@echo "ROOT_SLIB is $(ROOT_SLIB)"
	@echo "JAVA_SLIB is $(JAVA_SLIB)"
	@echo "INC_FLAGS is $(INC_FLAGS)"
	@echo "LD_FLAGS is $(LD_FLAGS)"
	@echo "LOAD_LIBDIRS is $(LOAD_LIBDIRS)"
	@echo "LOAD_LIBS is $(LOAD_LIBS)"
	@echo "BIN_EXES is $(BIN_EXES)"
	@echo "VPATH is $(VPATH)"

$(LIBRARY)(%.$(OBJ_SUFFIX)) : $(BUILD_DIR)/%.$(OBJ_SUFFIX)
	$(AR) rs $(@) $(BUILD_DIR)/$%

$(ROOT_SLIB) : $(CXX_SLIB_OBJS)
	$(GXX) $(CXX_SLIB_FLAGS) $(DL_LIB_FIX)  $(^) -o $(@)

$(JAVA_SLIB) : $(CXX_SLIB_OBJS)
	$(GXX) $(^) $(CXX_LD_FLAGS) $(JAVA_SLIB_FLAGS) $(DL_LIB_FIX) $(LOAD_LIBDIRS) -lRint -lCore -lCint -o $(@)

$(CXX_DYLIB) : $(CXX_SLIB_OBJS)
	$(GXX) -dynamiclib -flat_namespace -undefined suppress $(DL_LIB_FIX) $(^) -o $(@)

$(BUILD_DIR)/%.$(C_BIN_SUFFIX) : %.$(OBJ_SUFFIX) $(LIBRARY_EXISTS)
	$(CC) $(<) $(C_FLAGS) $(LD_FLAGS) $(LOAD_LIBDIRS) $(LOAD_LIBS) -o $(@)
	@$(CP) $(@) $(BIN_DIR)/$(*F)

$(BUILD_DIR)/%.$(CXX_BIN_SUFFIX) : %.$(OBJ_SUFFIX)
	$(GXX) $(<) $(CXX_LD_FLAGS) $(LD_FLAGS) $(DL_LIB_FIX) $(LOAD_LIBDIRS) $(LOAD_LIBS) -o $(@)
	@$(CP) $(@) $(BIN_DIR)/$(*F)

$(BUILD_DIR)/%.$(OBJ_SUFFIX) : %.$(C_SRC_SUFFIX)
	$(CC) $(C_FLAGS) -c $(<) -o $(@)

$(BUILD_DIR)/%.$(OBJ_SUFFIX) : %.$(CXX_SRC_SUFFIX)
	$(GXX) $(CXX_FLAGS) -c $(<) -o $(@)

$(BUILD_DIR)/$(PUB_DIR_NAME)/$(PROJECT)/$(PROJECT)Dict.$(CXX_SRC_SUFFIX) : $(CXX_INCS) $(CXX_SRCS)
	@test -d $(@D) || mkdir -p $(@D)
ifneq (,$(strip $(LOCAL_LINKDEF)))
	@$(CP) $(LOCAL_LINKDEF) $(@D)/LinkDef.h
else
	@touch $(@D)/LinkDefBody.h
	@echo Building LinkDef.h $(shell test -d $(@D) || mkdir -p $(@D)) $(foreach ROOT_CLASS, $(filter-out $(ROOT_TEMPLATES) $(ROOT_NON_CLASSES), $(patsubst %.$(CXX_INC_SUFFIX),%,$(notdir $(CXX_INCS)))), $(shell cd $(@D);echo "#pragma link C++ class "$(ROOT_CLASS)";" >> LinkDefBody.h))
ifneq (,$(strip $(EXPICIT_INSTANTIATION_SRCS)))
	@grep -h "^[ ]*template[ ]*[a-zA-Z0-9-]*<[ *a-zA-Z0-9-]*>[ ]*;[ ]*$$"  $(EXPICIT_INSTANTIATION_SRCS) | sed "s/^[ ]*template[ ]*/#pragma link C++ class /g" >> $(@D)/LinkDefBody.h
	@grep -h "^[ ]*#[ ]*include[ ]*" $(EXPICIT_INSTANTIATION_SRCS) > $(@D)/TemplateIncludes.h
endif
	@cat $(TOOLS_ROOT)/resources/LinkDefLeader.h > $(@D)/LinkDef.h
	@cat $(@D)/LinkDefBody.h >> $(@D)/LinkDef.h
	@cat $(TOOLS_ROOT)/resources/LinkDefTrailer.h >> $(@D)/LinkDef.h
	@$(RM) $(@D)/LinkDefBody.h
endif
	@touch $(@D)/TemplateIncludes.h
	(cd $(PUB_ROOT) ; rootcint -f ../$(@) -c $(ROOTCINT_INC_FLAGS) $(patsubst $(PUB_ROOT)/%,%,$(filter $(PUB_ROOT)/%,$(CXX_INCS))) $(patsubst $(PVT_ROOT)/%,%,$(filter $(PVT_ROOT)/%,$(CXX_INCS))) ../$(@D)/TemplateIncludes.h ../$(@D)/LinkDef.h)
ifneq (,$(strip $(ROOTCINT_FIX)))
	@$(ROOTCINT_FIX)
endif

$(DEPENDENCY_FILE) : $(INCS) $(SRCS) project.mk $(BUILT_FILES)
	$(BUILD_DEPENDS)

-include localTargets.mk

-include $(DEPENDENCY_FILE)
