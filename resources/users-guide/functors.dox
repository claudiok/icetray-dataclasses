/** 

    @page functors Functors! (But alas, no Smart Funktainers)
    @author Troy Straszheim (troy@resophonic.com)

    @section Synopsis

    Functors.  Full explanations to come.  Short explanation: a way to
    create a "view" of some data.  A regular database doesn't store a
    different array of pointers to some set of data for each sort
    order or filter criterion.  Instead, it stores the data in the
    most commonly used sort order (or perhaps not sorted at all) and
    then provides a way to create "views" of this data.  

    You can think of these functors as filter criteria encapsulated in
    objects.

    Blow-by-blow to come.   For now, here are the examples:

    Each of these examples should compile with a simple
    @code
    gcc -o thesort thesourcefile.cxx -lstdc++
    @endcode

    Here's how you'd have to do a quicksort in C with your own sorting criteria.  

    <a class="el" href="c-style.c">Cet code: c-style.c</a>
    @include c-style.c

    <br><br>
    This one demonstrates the default use of @c operator<() by the stl algorithm @c sort.
    <a class="el" href="sort.cxx"> Get code: sort.cxx</a>
    @include sort.cxx

    <br><br>
    Check it out: you can define @c operator<<(), and your objects
    learn how to print themselves!
    
    <a class="el" href="sort2.cxx"> Get code: sort2.cxx</a>
    @include sort2.cxx

    <br><br>
    You can use all different kinds of comparison functions.

    <a class="el" href="sort3.cxx"> Get code: sort3.cxx</a>
    @include sort3.cxx

    <br><br>
    Or use a filter criteria...

    <a class="el" href="sort4.cxx"> Get code: sort4.cxx</a>
    @include sort4.cxx

    <br><br>
    Now we have a Functor, not just a comparison function.  Functor is
    a class that defines @c operator().  The syntax is weird at first
    but it quickly becomes easy to understand.

    <a class="el" href="sort5.cxx"> Get code: sort5.cxx</a>
    @include sort5.cxx

    <br><br>
    When you have a real functor, you can store arguments to the
    filter/sort criteria inside the object.  The client doesn't have
    to know what the criteria are.

    <a class="el" href="sort6.cxx"> Get code: sort6.cxx</a>
    @include sort6.cxx

    <br><br>
    In this case, the criterion is, "is the OM's number not found in a
    vector of noisy OM that I have been given?".

    <a class="el" href="sort7.cxx"> Get code: sort7.cxx</a>
    @include sort7.cxx

    <br><br>
    Last but not least there is the DipoleFit, an entire fit written
    as a Functor.  Not here yet.
        
*/
