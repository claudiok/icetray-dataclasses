/**
   @mainpage IceCube Dataclasses User's Guide and Documentation

   This is documentation of and a user's guide for the C++ classes used
   to represent and store the event data of the IceCube neutrino detector.

   This guide is primarily intended for IceCube software developers who want
   to interact the C++ representation of the IceCube event data.  To this end 
   there
   are several examples each using different aspects of the 
   classes.  
   <!--Unfortunately some of these examples have been broken by
   the latest changes to the code -- the decision was made to go ahead
   and release the code now and fix the examples soon.-->

   By looking at these webpages, you will gain an understanding of how
   to use these C++ classes in your software.


<!-- Not needed, since we will generate it along with this page
   You may also find the automatically generated 
   <a href="../../doxygen-dataclasses/html/hierarchy.html>Doxygen
   documentation</a> useful. -->
   
   Thanks for looking!

   @author Erik Blaufuss (blaufuss@umdgrb.umd.edu)
   @author Tyce DeYoung (deyoung@umdgrb.umd.edu)
   @author Ralf Ehrlich (ehrlich@umdgrb.umd.edu)
   @author Spencer Klein (srklein@lbl.gov)
   @author Peter Niessen (niessen@ifh.de)
   @author John Pretz (pretz@umdgrb.umd.edu)
   @author Troy Straszheim (troy@ifh.de, troy@resophonic.com)
	   
   @section introduction Introduction

   The dataclasses were designed as an offline represention of the
   data that is produced by the IceCube detector data acquisition
   system or by IceCube simulations.  The dataclasses
   are also used to store data from post-acquisition processing and 
   analysis.

   As a physicist working with data from IceCube, you will probably
   interact more with these containers than any other part of the
   system, so have a good hard look and tell us what you think.

   In addition the dataclass code, we have prepared a collection of projects
   that use the dataclasses in some expected roles they will have to fill.
   These projects include:
   @li @c dataio: A project which contains classes which do the 
   work of interacting with Root files and F2K files to read and write the 
   data.  It is expected that this project will grow into the full 
   'event reading' code for the production software.

   @li @c dataio-modules: A collection of simple IceTray modules 
   which interface between the @c dataio classes and the framework.

<!-- @li <code>corsika-reader</code>: A project which contains IceTray modules
   which work together to fill an event with the MC tracks from a Corsika file.
-->

<!--   @li <code>eventviewer</code>: A preliminary try at an event viewer. -->

   @li <code>phys-services</code>: A first start at a collection of standard
   services for IceTray modules.  It is expected that this project will grow
   into a full set of standard IceTray services, so it is included as a 
   separate project

   @li <code>examples-offline</code>: These are several IceTray modules which
   are written using the dataclasses.  There are some simple simulation
   modules which pass around the structures of the dataclasses, but don't 
   perform any physics.  There is also an implementation of a simple
   AMANDA reconstruction.  

   @li <code>eventviewer</code>: This is a first-cut at an eventviewer
   for IceCube events.

   @li <code>eventviewer-modules</code>: This project includes a module
   which uses the eventviewer to sequentially look at events.  Several
   example icetray scripts are also provided.

   In the @ref examples section there are details about the examples which
   are included in this metaproject.

   The @ref overview section explains the thinking behind the design and 
   mechanics of the code.

<!--   @section contents Contents

   @li @ref sample -->

   @section preparation Preparation

   Before you are able to play with the dataclasses, you will have to do 
   these two things:

   @li @ref devenv-setup
   
<!--   @li @ref icetray-setup -->

   @li @ref dataclasses-setup

   When you've done these two you will be ready to continue.

   @section examples Examples

   Here are a few tutorial examples.  They are all included in the 
   DATACLASS-APP metaproject.

<!--   @li @ref corsika-reader -->

   @li @ref dataio

   @li @ref event-viewer 
   
   @li @ref phys-services

   @li @ref mock-sim  

   @li @ref reconstruction 

<!--   @li @ref dataclass-and-root -->
 
   @section overview Overview of the Data Classes
   A lot of thought has gone into the design and implementation of these 
   classes.  These sections attempt to explain the decisions that were
   made and why they  
   were made, as well as giving in-depth explanations of specific
   parts of the code.     

   @li @ref architecture

   @li @ref stlsyntax

   @li @ref layout

   @li @ref om-response

   @li @ref reco-results
   
   @li @ref tracks

   @li @ref memorymanagement

   <!--    
   @li @ref best-practices
   -->   

*/
