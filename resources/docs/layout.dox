/**
   @page layout Layout of the event data

   @author Tyce DeYoung (deyoung@umdgrb.umd.edu)

   @section frame The Frame

   All data in an event record is contained within an @c I3Frame
   object.  The frame is the container that IceTray passes along from
   module to module.  The top-level objects within the frame come in
   pairs of a header object and a contents object.  The contents
   objects are technically optional, but will have been added to the
   frame before it is delivered to most software modules, so we will
   assume that they are present.  See @ref streams for more
   information.  

   The layout of a frame will be something like this:

   @image html StreamsOverview.png

   Only four streams are shown here; in general there will be more
   streams, and some of the streams will have more contents (the
   Monitoring stream will contain information about more than just the
   atmospheric conditions, for example).  These additional streams
   have not yet been implemented, as they will depend on details
   of the DAQ, Monitoring, Calibration, and Experimental Control
   subsystems that are not yet finalized.
   
   The information specific to a single event in the detector -- hits
   and associated information like reconstructions and Monte Carlo
   truth --  is found in the @c I3Event class.  More information can
   be found at @ref event.  Geometry information is found in its own
   stream, however, because it is basically static and need not be
   copied separately to every frame; more information 
<!-- is at @ref geometry.   -->
   about geometry information will be added soon.
   Similarly, monitor information,
   including OM calibration information, will be stored in a separate
   branch or branches, 
<!-- as described at @ref monitor. -->
   which will be added as information about the monitoring systems
   becomes available.

   @section event The Event

   The @c I3Event object contains several subobjects, as shown here:

   @image html EventOverview.png

   I3TriggerDict contains information about which triggers led to the 
   I3Event and which triggers were passed.  The I3FilterDict contains 
   information about filters applied to the event after the event
   is triggered..  
   The @c I3OMResponseMap object is a
   container containing
   the information related to all the hits in the event, although
   geometry and calibration information are found elsewhere.  There
   are several subsets of information within each @c I3OMResponse; more
   details are found at @ref om-response.  The @c I3OMResponseMap only
   contains information about OMs that were actually hit in the event.  
   The I3OMResponseMap container is a map<OMKey,I3OMResponsePtr> and as 
   such it is accessed by specifying an OMKey for the I3OMResponse that
   you want.  The OMKey is a lightweight class which represents the
   string and tube number for a particular tube.
   A loop over all tubes, rather than
   just hit tubes, should iterate over the geometry or status
   maps, rather than the @c I3OMResponseMap.

   The @c I3RecoResultDict is a map (a list of named objects) of the
   results of various reconstruction algorithms.  Each algorithm will
   have one entry in the map, identified by name.  Different
   algorithms will produce different types of results: some return a
   single track, some return several alternative tracks, and some may
   return a collection of tracks that jointly describe the event.
   Each of these types of results will be stored as a different type
   of @c I3RecoResult object; see @ref reco-results for more
   information.

   Information about the Monte Carlo truth is stored in two places in the 
   event: information about particular OMs is stored with that 
   @c I3OMResponse, while track and primary information is stored in the 
   @c I3MCParticleData object.  (NB.  The I3MCParticleData field is not a 
   part of the I3Event class, but rather the I3MCEvent subclass.
   The @c I3MCTrackData contains three multimaps, so that the
   event-level Monte Carlo information can be organized by 'event.'
   In general, an 'event' as seen by the detector and DAQ may consist
   of several physical 'events': separate collections of tracks
   produced by independent primary particles.  Each primary, along
   with its tracks in the InIce and IceTop detectors, has an entry in
   the @c I3MCTrackData object.

   Finally, the @c Event contains an @c I3Bag object.  The I3Bag is a
   generic container for @c TObjects.  It is a place to store
   user-defined 
   information that cannot be accommodated in the event structure.
   The hope is that the bag will need to be used rarely, as a
   temporary expedient until the data classes can be fixed to handle
   whatever type of information is being put in the bag.


*/
