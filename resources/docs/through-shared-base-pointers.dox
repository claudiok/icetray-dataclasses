/**
   @page through-shared-base-pointers Getting your class to serialize through its base pointer


So your class inherits from a base class and you would like the data members of the
base class to be serialized as well.  Take for example I3RecoHit, which inherits from
I3Hit.  The relevant code looks like...

@verbatim
    ar & make_nvp("I3Hit", base_object<I3Hit>(*this));
@endverbatim

Adding this line calls the serialize method of the base class every time
the serialize method of the derived class is called.

You'll likely want to serialize your class (I3RecoHit) through a pointer to the base class.
Most containers work like this (maps, lists, vectors, etc.).  In that case you'll need to 
add the following line to the end of your header file (after the derived class declaration).

@verbatim
BOOST_SHARED_POINTER_EXPORT(MyClass);
@endverbatim

...or in this example...

@verbatim
BOOST_SHARED_POINTER_EXPORT(I3RecoHit);
@endverbatim
                                     
Now you can fill a vector of shared pointers to I3Hit (i.e. vector<I3HitPtr>)
with shared pointers of I3RecoHit and serialize it.  Boost serialization handles 
STL containers quite naturally.  They should work just like primitive types.

*/
