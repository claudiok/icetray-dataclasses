/**
   @page simplest-case Simplest serialization method example

I use I3Hit as an example of the simplest case.  Even though it does inherit from TObject we're not
going to want to write any of the TObject information to a file so our serialize method does not have to
know about TObjects at all.

I3Hit has only two data members.  A double and an integer.
   
   @verbatim
  double time_;
  int hitID_;
   @endverbatim	                                                                                

To be able to serialize this class' data members you only need to add the following lines
in the class' private portion of the class header file (in the project/public area).

   @verbatim
  friend class boost::serialization::access;

  template <class Archive>
  void serialize(Archive& ar, unsigned version);
   @endverbatim	            

If this class does not have a source file, onre will need to be added to <project>/private.
In this case it is datclasses/private/I3Hit.cxx.

   @verbatim
  #include <dataclasses/BoostHeaders.h>
  #include <dataclasses/I3Hit.h>

  template <class Archive>
  void serialize(Archive& ar, unsigned version)
  {
    ar & make_nvp("Time", time_);
    ar & make_nvp("HitID", hitID_);
  }

  I3_SERIALIZABLE(I3Hit);
   @endverbatim	            

Note that not only did we move the implementation of the serialize method to its own source file,
but the we included the macro I3_SERIALIZABLE().  The  I3_SERIALIZABLE macro makes sure
the boost::serialization libraries properly know about your class.

For a more detailed explanation of the above code check out @ref detailed-simplest-case.

*/
